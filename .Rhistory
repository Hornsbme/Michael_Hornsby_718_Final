model <- lm(yvar ~ xvar)
residuals <- residuals(model)
my_data <- as.data.frame(cbind(xvar, yvar, residuals))
# Create an order vector and order the residuals from largest to smallest
order_vector <- order(abs(my_data$residuals), decreasing = TRUE)
my_data <- my_data[order_vector,]
# Create the logical vector, add it to my data set, and return the data set
logical_vector <- (c(rep(TRUE, p), rep(FALSE,length(my_data$xvar) - p)))
my_data$outcome <- logical_vector
my_data <- data.frame(my_data)
# This creates the scatterplot with the regline.
scatterplot(x = my_data$xvar,
y = my_data$residuals,
regLine = FALSE,
groups = my_data$outcome,
legend = FALSE,
smooth = FALSE,
xlab = "Semester 1 GPA",
ylab = "Semester 2 GPA",
main = "Highlighted Largest Residuals")
my_data_tib <- as.tibble(my_data)
ggplot(my_data_tib, aes(x = xvar, y = yvar, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
outcome.ds <- return(my_data)
}
resid.function(GPA$S1GPA, GPA$S2GPA, 74)
resid.function <- function(xvar, yvar, p) {
# Create the model and residuals
model <- lm(yvar ~ xvar)
residuals <- residuals(model)
my_data <- as.data.frame(cbind(xvar, yvar, residuals))
# Create an order vector and order the residuals from largest to smallest
order_vector <- order(abs(my_data$residuals), decreasing = TRUE)
my_data <- my_data[order_vector,]
# Create the logical vector, add it to my data set, and return the data set
logical_vector <- (c(rep(TRUE, p), rep(FALSE,length(my_data$xvar) - p)))
my_data$outcome <- logical_vector
my_data <- data.frame(my_data)
# This creates the scatterplot with the regline.
scatterplot(x = my_data$xvar,
y = my_data$residuals,
regLine = FALSE,
groups = my_data$outcome,
legend = FALSE,
smooth = FALSE,
xlab = "Semester 1 GPA",
ylab = "Semester 2 GPA",
main = "Highlighted Largest Residuals")
return(my_data)
}
resid.function(GPA$S1GPA, GPA$S2GPA, 74)
resid.function <- function(xvar, yvar, p) {
# Create the model and residuals
model <- lm(yvar ~ xvar)
residuals <- residuals(model)
my_data <- as.data.frame(cbind(xvar, yvar, residuals))
# Create an order vector and order the residuals from largest to smallest
order_vector <- order(abs(my_data$residuals), decreasing = TRUE)
my_data <- my_data[order_vector,]
# Create the logical vector, add it to my data set, and return the data set
logical_vector <- (c(rep(TRUE, p), rep(FALSE,length(my_data$xvar) - p)))
my_data$outcome <- logical_vector
my_data <<- data.frame(my_data)
# This creates the scatterplot with the regline.
scatterplot(x = my_data$xvar,
y = my_data$residuals,
regLine = FALSE,
groups = my_data$outcome,
legend = FALSE,
smooth = FALSE,
xlab = "Semester 1 GPA",
ylab = "Semester 2 GPA",
main = "Highlighted Largest Residuals")
return(my_data)
}
resid.function(GPA$S1GPA, GPA$S2GPA, 74)
View(my_data)
resid.function(GPA$S1GPA, GPA$S2GPA, 74)
ggplot(my_data, aes(x = S1GPA, y = S2GPA, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
resid.function(GPA$S1GPA, GPA$S2GPA, 74)
ggplot(my_data, aes(x = xvar, y = yvar, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
resid.function(GPA$S1GPA, GPA$S2GPA, 74)
ggplot(my_data, aes(x = xvar, y = yvar, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Highlighted Residuals",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
resid.function <- function(xvar, yvar, p, key) {
# Create the model and residuals
model <- lm(yvar ~ xvar)
residuals <- residuals(model)
my_data <- as.data.frame(cbind(key, xvar, yvar, residuals))
# Create an order vector and order the residuals from largest to smallest
order_vector <- order(abs(my_data$residuals), decreasing = TRUE)
my_data <- my_data[order_vector,]
# Create the logical vector, add it to my data set, and return the data set
logical_vector <- (c(rep(TRUE, p), rep(FALSE,length(my_data$xvar) - p)))
my_data$outcome <- logical_vector
my_data <<- data.frame(my_data)
# This creates the scatterplot with the regline.
scatterplot(x = my_data$xvar,
y = my_data$residuals,
regLine = FALSE,
groups = my_data$outcome,
legend = FALSE,
smooth = FALSE,
xlab = "Semester 1 GPA",
ylab = "Semester 2 GPA",
main = "Highlighted Largest Residuals")
return(my_data)
}
resid.function(GPA$S1GPA, GPA$S2GPA, 74, GPA$ID)
ggplot(my_data, aes(x = xvar, y = yvar, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Highlighted Residuals",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
GPA %>% filter(ID == 364)
GPA %>% filter(ID == 377)
my_data$ID <- my_data$key
View(my_data)
my_data$ID <- my_data$key
GPA <- my_data %>% left_join(GPA, by = "ID")
View(GPA)
my_data$ID <- my_data$key
GPA <- my_data %>% left_join(GPA, by = "ID")
GPA <- GPA %>% filter(outcome = FALSE)
my_data$ID <- my_data$key
GPA <- my_data %>% left_join(GPA, by = "ID")
GPA <- GPA %>% filter(outcome == FALSE)
View(GPA)
resid.function(GPA$S1GPA, GPA$S2GPA, 74, GPA$ID)
ggplot(my_data, aes(x = xvar, y = yvar, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Highlighted Residuals",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
my_data$ID <- my_data$key
GPA <- my_data %>% left_join(GPA, by = "ID")
GPA <- GPA %>% filter(outcome == FALSE)
demo <- as.tibble(read_csv(here("data", "job_prep_demo.csv")))
demo
GPA <- as.tibble(read_csv(here("data", "job_prep_GPA.csv")))
GPA
survey <- as.tibble(read_csv(here("data", "job_prep_survey.csv")))
survey
resid.function(GPA$S1GPA, GPA$S2GPA, 74, GPA$ID)
ggplot(my_data, aes(x = xvar, y = yvar, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Highlighted Residuals",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
my_data$ID <- my_data$key
GPA <- my_data %>% left_join(GPA, by = "ID")
GPA <- GPA %>% filter(outcome == FALSE)
View(GPA)
ggplot(my_data, aes(x = xvar, y = yvar, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Top 10% Residuals Removed",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
ggplot(GPA, aes(x = xvar, y = yvar)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Top 10% Residuals Removed",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
GPA$year.GPA <-
((GPA$S1Credits * GPA$S1GPA) + (GPA$S2Credits * GPA$S2GPA)) / (GPA$S1Credits + GPA$S2Credits)
View(GPA)
View(check.survey)
View(survey)
my.function <- function(dataset, numeric, reverse) {
reverse <- reverse + 1
numeric <- numeric + 1
reverse_dataset <- dataset
for (i in reverse) {
reverse_dataset[i] <- abs(reverse_dataset[i] - numeric)
}
dataset$total <- rowSums(reverse_dataset[,2:as.numeric(ncol(reverse_dataset))])
print(dataset)
}
demo <- as.tibble(read_csv(here("data", "job_prep_demo.csv")))
demo
GPA <- as.tibble(read_csv(here("data", "job_prep_GPA.csv")))
GPA
survey <- as.tibble(read_csv(here("data", "job_prep_survey.csv")))
survey
library(here)
library(tidyverse)
library(ggrepel)
library(scales)
library(readxl)
library(purrr)
library(dplyr)
library(car)
demo <- as.tibble(read_csv(here("data", "job_prep_demo.csv")))
demo
GPA <- as.tibble(read_csv(here("data", "job_prep_GPA.csv")))
GPA
survey <- as.tibble(read_csv(here("data", "job_prep_survey.csv")))
survey
View(survey)
check.demo <- demo %>% count(ID)
check.demo %>% filter(n > 1)
check.survey <- survey %>% count(ID)
check.survey %>% filter(n > 1)
check.GPA <- GPA %>% count(ID)
check.GPA %>% filter(n > 1)
GPA %>% filter(ID == 659)
GPA <- GPA %>% filter(ID != 659)
check.GPA <- GPA %>% count(ID)
check.GPA %>% filter(n > 1)
ggplot(GPA, aes(x = S1GPA, y = S2GPA)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
resid.function(GPA$S1GPA, GPA$S2GPA, 74, GPA$ID)
ggplot(my_data, aes(x = xvar, y = yvar, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Highlighted Residuals",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
my_data$ID <- my_data$key
GPA <- my_data %>% left_join(GPA, by = "ID")
GPA <- GPA %>% filter(outcome == FALSE)
ggplot(GPA, aes(x = xvar, y = yvar)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Top 10% Residuals Removed",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
GPA$year.GPA <-
((GPA$S1Credits * GPA$S1GPA) + (GPA$S2Credits * GPA$S2GPA)) / (GPA$S1Credits + GPA$S2Credits)
my.function <- function(dataset, numeric, reverse) {
reverse <- reverse + 1
numeric <- numeric + 1
reverse_dataset <- dataset
for (i in reverse) {
reverse_dataset[i] <- abs(reverse_dataset[i] - numeric)
}
dataset$total <- rowSums(reverse_dataset[,2:as.numeric(ncol(reverse_dataset))])
print(dataset)
}
reverse.function <- function(dataset, numeric, reverse) {
reverse <- reverse + 1
numeric <- numeric + 1
reverse_dataset <- dataset
for (i in reverse) {
reverse_dataset[i] <- abs(reverse_dataset[i] - numeric)
}
dataset$total <- rowSums(reverse_dataset[,2:as.numeric(ncol(reverse_dataset))])
print(dataset)
}
reverse.function(survey, 6, c(4, 9, 12, 13))
View(survey)
reverse.function <- function(dataset, numeric, reverse) {
reverse <- reverse + 1
numeric <- numeric + 1
reverse_dataset <- dataset
for (i in reverse) {
reverse_dataset[i] <- abs(reverse_dataset[i] - numeric)
}
dataset$total <- rowSums(reverse_dataset[,2:as.numeric(ncol(reverse_dataset))])
print(dataset)
}
reverse.function(survey, 6, c(4, 9, 12, 13))
reverse.function(survey, 6, c(4, 9, 12, 13))
View(survey)
reverse.function <- function(dataset, numeric, reverse) {
reverse <- reverse + 1
numeric <- numeric + 1
reverse_dataset <- dataset
for (i in reverse) {
reverse_dataset[i] <- abs(reverse_dataset[i] - numeric)
}
dataset$total <<- rowSums(reverse_dataset[,2:as.numeric(ncol(reverse_dataset))])
print(dataset)
}
reverse.function(survey, 6, c(4, 9, 12, 13))
reverse.function <- function(dataset, numeric, reverse) {
reverse <- reverse + 1
numeric <- numeric + 1
reverse_dataset <- dataset
for (i in reverse) {
reverse_dataset[i] <- abs(reverse_dataset[i] - numeric)
}
dataset$total <- rowSums(reverse_dataset[,2:as.numeric(ncol(reverse_dataset))])
print(dataset)
dataset.tot <<- dataset
}
reverse.function(survey, 6, c(4, 9, 12, 13))
View(dataset.tot)
reverse.function(survey, 6, c(4, 9, 12, 13))
survey <- dataset.tot
survey.tot <- survey$ID
survey
survey.tot <- survey$ID
survey.tot
survey.tot <- survey$ID
survey.tot$survey.total <- survey$total
survey.tot
survey.tot <- as.data.frame(survey$ID)
survey.tot$survey.total <- survey$total
survey.tot
survey.tot <- survey[,c(1,16)]
survey.tot <- survey[,c(1,16)]
survey.tot
View(survey.tot)
View(GPA)
survey.tot <- survey[,c(1,16)]
GPA <- survey.tot %>% left_join(GPA, by = "ID")
View(GPA)
View(demo)
demo.sub <- demo[,c(1,5)]
View(demo.sub)
demo.sub <- demo[,c(1,5)]
GPA <- demo.sub %>% left_join(GPA, by = "ID")
View(GPA)
GPA <- GPA[complete.cases(GPA),]
View(GPA)
reverse.function <- function(dataset, numeric, reverse) {
reverse <- reverse + 1
numeric <- numeric + 1
reverse_dataset <- dataset
for (i in reverse) {
reverse_dataset[i] <- abs(reverse_dataset[i] - numeric)
}
dataset$survey.total <- rowSums(reverse_dataset[,2:as.numeric(ncol(reverse_dataset))])
print(dataset)
dataset.tot <<- dataset
}
demo <- as.tibble(read_csv(here("data", "job_prep_demo.csv")))
demo
GPA <- as.tibble(read_csv(here("data", "job_prep_GPA.csv")))
GPA
survey <- as.tibble(read_csv(here("data", "job_prep_survey.csv")))
survey
check.demo <- demo %>% count(ID)
check.demo %>% filter(n > 1)
check.survey <- survey %>% count(ID)
check.survey %>% filter(n > 1)
check.GPA <- GPA %>% count(ID)
check.GPA %>% filter(n > 1)
GPA %>% filter(ID == 659)
GPA <- GPA %>% filter(ID != 659)
check.GPA <- GPA %>% count(ID)
check.GPA %>% filter(n > 1)
ggplot(GPA, aes(x = S1GPA, y = S2GPA)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
resid.function(GPA$S1GPA, GPA$S2GPA, 74, GPA$ID)
ggplot(my_data, aes(x = xvar, y = yvar, color = outcome)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Highlighted Residuals",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
my_data$ID <- my_data$key
GPA <- my_data %>% left_join(GPA, by = "ID")
GPA <- GPA %>% filter(outcome == FALSE)
ggplot(GPA, aes(x = xvar, y = yvar)) +
geom_point() +
labs(title = "Scatterplot of Semester 2 GPA on Semester 1 GPA with Top 10% Residuals Removed",
x = "Semester 1 GPA",
y = "Semester 2 GPA")
GPA$year.GPA <-
((GPA$S1Credits * GPA$S1GPA) + (GPA$S2Credits * GPA$S2GPA)) / (GPA$S1Credits + GPA$S2Credits)
reverse.function(survey, 6, c(4, 9, 12, 13))
survey <- dataset.tot
survey.tot <- survey[,c(1,16)]
GPA <- survey.tot %>% left_join(GPA, by = "ID")
demo.sub <- demo[,c(1,5)]
GPA <- demo.sub %>% left_join(GPA, by = "ID")
GPA <- GPA[complete.cases(GPA),]
View(GPA)
GPAonOPT.mod <- lm(year.GPA ~ survey.total, data = GPA)
print(GPAonOPT.mod)
GPAonOPT.mod <- lm(year.GPA ~ survey.total, data = GPA)
print(GPAonOPT.mod)
summary(GPAonOPT.mod)
GPAonOPT.mod <- lm(year.GPA ~ survey.total, data = GPA)
summary(GPAonOPT.mod)
GPAonOPT.mod2 <- lm(year.GPA ~ survey.total^2, data = GPA)
summary(GPAonOPT.mod2)
GPAonOPT.mod2 <- lm(year.GPA ~ survey.total + I(survey.total^2), data = GPA)
summary(GPAonOPT.mod2)
GPA %>%
ggplot(aes(x = survey.total, y = year.GPA)) +
geom_point() +
stat_smooth(method = lm)
GPA %>%
ggplot(aes(x = survey.total, y = year.GPA)) +
geom_point() +
stat_smooth(method = lm, se = FALSE)
GPA %>%
ggplot(aes(x = survey.total, y = year.GPA)) +
geom_point() +
stat_smooth(method = lm, se = FALSE) +
labs(title = "Scatter Plot of Senior Year GPA on Optimism About Future",
x = "Optimism About Future",
y = "Senior Year GPA")
GPAonOPT.mod <- lm(year.GPA ~ survey.total, data = GPA)
summary(GPAonOPT.mod)
GPA %>%
ggplot(aes(x = survey.total)) +
geom_qq()
GPA %>%
ggplot(aes(x = survey.total)) +
geom_qq(aes(x = survey.total))
GPA %>%
ggplot(aes(x = survey.total)) +
geom_qq(aes(sample = survey.total))
GPA %>%
ggplot() +
geom_qq(aes(sample = survey.total))
GPA %>%
ggplot(GPA) +
geom_qq(aes(sample = survey.total))
GPA %>%
ggplot() +
geom_qq(aes(sample = survey.total))
GPA %>%
ggplot() +
geom_qq(aes(sample = survey.total))
GPA %>%
ggplot() +
geom_qq(aes(sample = year.GPA))
GPA %>%
ggplot() +
geom_qq(aes(sample = survey.total)) +
labs(title = "QQ-plot for Survey Total")
GPA %>%
ggplot() +
geom_qq(aes(sample = year.GPA)) +
labs(tite = "QQ-plot for Senior Year GPA")
GPA %>%
ggplot() +
geom_qq(aes(sample = survey.total)) +
labs(title = "QQ-plot for Survey Total")
GPA %>%
ggplot() +
geom_qq(aes(sample = year.GPA)) +
labs(title = "QQ-plot for Senior Year GPA")
model.interaction <- aov(GPA$year.GPA ~ GPA$survey.total*GPA$Subject)
Anova(model.2)
model.interaction <- aov(GPA$year.GPA ~ GPA$survey.total*GPA$Subject)
Anova(model.interaction)
model.interaction <- aov(GPA$year.GPA ~ GPA$survey.total*GPA$Subject)
Anova(model.interaction)
model.maineffects <- aov(GPA$year.GPA ~ GPA$survey.total+GPA$Subject)
Anova(model.maineffects)
GPA %>%
ggplot(aes(x = survey.total, y = year.GPA, color = Subject, shape = Subject)) +
geom_point(aes(color = Subject)) +
stat_smooth(method = lm, se = FALSE) +
labs(title = "Scatter Plot for Cities with Less Than 1,000 Hospital Beds",
x = "Number of Hospital Beds",
y = "Number of Doctors")
GPA %>%
ggplot(aes(x = survey.total, y = year.GPA, color = Subject, shape = Subject)) +
geom_point(aes(color = Subject)) +
stat_smooth(method = lm, se = FALSE) +
labs(title = "Scatter Plot with Regression Line of Senior Year GPA on Optimism About Future",
x = "Number of Hospital Beds",
y = "Number of Doctors")
GPA %>%
ggplot(aes(x = survey.total, y = year.GPA, color = Subject, shape = Subject)) +
geom_point(aes(color = Subject)) +
stat_smooth(method = lm, se = FALSE) +
labs(title = "Scatter Plot with Regression Line of Senior Year GPA on Optimism About Future by     Subject",
x = "Number of Hospital Beds",
y = "Number of Doctors")
GPA %>%
ggplot(aes(x = survey.total, y = year.GPA, color = Subject, shape = Subject)) +
geom_point(aes(color = Subject)) +
stat_smooth(method = lm, se = FALSE) +
labs(title = "Senior Year GPA on Optimism About Future by Subject",
x = "Optimism About Future",
y = "Senior Year GPA")
GPA %>%
ggplot(aes(x = subject, y = survey.total)) +
geom_boxplot()
GPA %>%
ggplot(aes(x = Subject, y = survey.total)) +
geom_boxplot()
GPA %>%
ggplot(aes(x = Subject, y = survey.total)) +
geom_boxplot() +
labs(title = "Boxplots of Optimism about Future by Subject",
x = "Subject",
y = "Survey Total")
summary(aov(survey.total ~ Subject, data = GPA))
my.anova <- aov(survey.total ~ Subject, data = GPA)
my.anova <- aov(survey.total ~ Subject, data = GPA)
my.anova <- aov(survey.total ~ Subject, data = GPA)
my.anova.result <- anova(my.anova)
my.anova <- aov(survey.total ~ Subject, data = GPA)
my.anova.result <- anova(my.anova)
my.anova.result
TukeyHSD(my.anova)
